import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const t="/vuepress-summary/assets/broswerTaskManager-097020b3.png",p="/vuepress-summary/assets/browserTaskManager2-cd1db29c.png",i={},c=e('<h1 id="内存泄漏问题排查修复" tabindex="-1"><a class="header-anchor" href="#内存泄漏问题排查修复" aria-hidden="true">#</a> 内存泄漏问题排查修复</h1><p>参考：https://www.cnblogs.com/liuyongqi/p/14950049.html<br> https://www.cnblogs.com/plBlog/p/11429939.html</p><h2 id="检测内存泄漏的方法" tabindex="-1"><a class="header-anchor" href="#检测内存泄漏的方法" aria-hidden="true">#</a> 检测内存泄漏的方法</h2><p>https://v2.cn.vuejs.org/v2/cookbook/avoiding-memory-leaks.html<br> 打开浏览器任务管理器，查看内存占用情况: <img src="'+t+'" alt="浏览器任务管理器"><img src="'+p+`" alt="网页内存占用"></p><p>如果同一个页面做了某些操作后，或者反复切换页面，等页面稳定后，内存明显增加，说明有一些内存没有被释放掉</p><h2 id="解决-优化措施" tabindex="-1"><a class="header-anchor" href="#解决-优化措施" aria-hidden="true">#</a> 解决/优化措施</h2><ol><li>创建的实例需要及时释放掉 这种一般会产生闭包，导致DOM对象和脚本中的对象双向引用，然后DOM关闭页面会被销毁，js对象没有调用销毁方法释放掉</li></ol><ul><li>echarts实例手动销毁</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">echarts<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
chart<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>

<span class="token comment">// 关闭页面等情况下可以将实例销毁掉</span>
chart<span class="token operator">?.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>amap/bmap地图实例销毁</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMap<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> options<span class="token punctuation">)</span>

<span class="token comment">// 销毁</span>
map<span class="token operator">?.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>销毁视频实例 视频不播放的时候记得不要再拉流了，一般视频播放插件会有销毁实例的方法 ...</li></ul><ol start="2"><li>页面销毁时移除removeEventListener</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>

<span class="token comment">// 移除监听</span>
el<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>EventBus事件解绑</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventBus<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handle<span class="token punctuation">)</span> <span class="token comment">// 父子组件事件监听后到解绑</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>清理定时器</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>删除开发时留下的不必要的console.log</li><li>不要一次渲染过多的node节点 容易卡，可能卡崩溃了<br> 可以使用分页或者懒加载、虚拟滚动等方式</li><li>减少页面中不必要的引入</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;xxx&#39;</span>
<span class="token comment">// 页面中只用到a，结果引入一堆不必要的东西，影响性能</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>减少this上的状态 this对象一直存在不会被回收</li><li>可以给一些操作，如接口调用，增加catch，方式操作失败影响后续内容执行（非内存泄漏）</li></ol>`,21),o=[c];function l(r,u){return s(),a("div",null,o)}const v=n(i,[["render",l],["__file","memoryLeaks.html.vue"]]);export{v as default};
