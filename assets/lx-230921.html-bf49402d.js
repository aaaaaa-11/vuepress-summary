import{_ as p,M as l,p as o,q as c,R as n,t as s,N as e,v as i,a1 as a}from"./framework-5866ffd3.js";const u={},r=n("h1",{id:"lanxiang-23-09-21",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lanxiang-23-09-21","aria-hidden":"true"},"#"),s(" lanxiang-23-09-21")],-1),d=n("p",null,"lanxiangdashujukeji(shanghai)笔试题",-1),k=n("p",null,"感觉这套题出的有点问题。",-1),v=a(`<p>this指向</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>created () {
  this.tipFn();
  setTimeout(() =&gt; {
    console.log(this);
  }, 1000);
},
methods: {
  tipFn: () =&gt; {
    console.log(this);
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. Vue Vue</p><p>B. Vue Window</p><p>C. Window Vue</p><p>D. Window Window</p><p>解析：</p>`,7),m={href:"https://v2.cn.vuejs.org/v2/api/#methods",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>vue2严格模式下，箭头函数指向undefined，setTimeout中，回调函数是箭头函数，this指向它的父级作用域，即created绑定的this，也就是vue实例</p><p>答案：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>created () {
  this.tipFn();
  setTimeout(() =&gt; {
    console.log(this); // window
  }, 1000);
},
methods: {
  tipFn: () =&gt; {
    console.log(this); // undefined
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b=a(`<li><p>在不破坏结构的情况下，应该使用哪个标签</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1 === 1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. div</p><p>B.section</p><p>C.span</p><p>D.template</p><p>解析：vue中template标签结合v-if不会破坏结构，应该选D</p></li>`,1),h=n("p",null,"哪个是错误的键盘事件",-1),q=n("p",null,"A. @keyup.enter",-1),_=n("p",null,"B. @keyup.ctrl",-1),f=n("p",null,"C. @keyup.tab",-1),y=n("p",null,"D. @keydown.esc",-1),x={href:"https://cn.vuejs.org/guide/essentials/event-handling.html#key-modifiers",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>fullname和computename分别执行了几次</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ fullname() }},{{ computename }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    {{ fullname() }},{{ computename }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    {{ fullname() }},{{ computename }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">firstname</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lastname</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">fullname</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">computename</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. 1, 1</p><p>B. 1, 3</p><p>C. 3, 1</p><p>D. 3, 3</p>`,6),S=a(`<p>侦听属性firstname，横线上正确的写法：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>data () {
  return {
    fullname: () =&gt; ({
      firstname: &#39;first&#39;,
      lastname: &#39;last&#39;
    })
  }
},
watch: {
  ___ (val) {
    console.log(&#39;firstname&#39;, val)
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. fullname.firstname</p><p>B. fullname[firstname]</p><p>C. &quot;fullname.firstname&quot;</p><p>D. {fullname.firstname}</p>`,6),j={href:"https://cn.vuejs.org/api/options-state.html#watch",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,[n("p",null,"哪些不改变原数组："),n("p",null,"splice、slice、shift、concat、pop、filter"),n("p",null,"解析：splice是在数组指定位置替换/增加/删除元素，会改变原数组；slice截取数组中某段元素返回，不改变原数组；shift在数组首部删除，会改变原数组；concat返回连接后的数组，不改变原数组；pop数组末尾删除，会改变原数组；filter返回按条件过滤后的数组，不改变原数组。会改变原数组的方法有：splice、shift、pop、unshift、add、reverse、sort、copyWithin、fill")],-1),D=a(`<p>选择学习后，hobby的值为？</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>学习<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>学习
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>旅游<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>旅游
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>游戏<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>游戏
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. &quot;学习&quot;</p><p>B. [&quot;学习&quot;]</p><p>C. [&quot;学习&quot;, &quot;旅游&quot;, &quot;游戏&quot;]</p><p>D. true</p><p>解析：</p>`,7),B=n("br",null,null,-1),C={href:"https://v2.cn.vuejs.org/v2/guide/forms.html",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"所以，上面选中后，hobby会返回true。并且，选中学习后，其他的也会被选中。",-1),I=n("p",null,'但是注意，hobby这里是字符串，会默认解析为布尔值，但是如果hobby设置为数组，则选中后为["学习"]，其他不会被一同选中。',-1),N=a(`<p>下面vue指令哪个不会导致xss问题</p><p>A. v-cloak</p><p>B. v-html</p><p>C. v-pre</p><p>D. v-text</p><p>解析：xss（跨站脚本攻击），指的是将恶意代码注入到其他受信任的网站中。</p><ul><li>v-html用于将数据渲染为HTML。</li></ul><blockquote><p>在你的站点上动态渲染任意的 HTML 是非常危险的，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要将用户提供的内容作为插值。</p></blockquote><p>参考以下代码：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInput<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">userInput</span><span class="token operator">:</span> <span class="token string">&#39;&lt;img src=x onerror=alert(&quot;XSS&quot;)&gt;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中userInput渲染后会触发<code>onerror</code>事件，执行alert(&#39;XSS&#39;)，从而导致XSS攻击。</p><p>v-text用于绑定元素的text，不会解析标签等，所以不会有XSS攻击。</p>`,12),M={href:"https://cn.vuejs.org/api/built-in-directives.html#v-pre",target:"_blank",rel:"noopener noreferrer"},T=a(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-pre</span><span class="token punctuation">&gt;</span></span>
      {{ a }}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ a }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ a }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;字符串&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面渲染结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ a }}
{{ a }}
字符串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="">v-clock</a>用于隐藏尚未完成编译的 DOM 模板。</li></ul><p>该指令只在没有构建步骤的环境下需要使用。</p><p>当使用直接在 DOM 中书写的模板时，可能会出现一种叫做“未编译模板闪现”的情况：用户可能先看到的是还没编译完成的双大括号标签，直到挂载的组件将它们替换为实际渲染的内容。</p><p>v-cloak 会保留在所绑定的元素上，直到相关组件实例被挂载后才移除。配合像 [v-cloak] { display: none } 这样的 CSS 规则，它可以在组件编译完毕前隐藏原始模板。</p>`,7),E=a(`<li><p>按顺序点击链接后，点击一次浏览器的返回，会返回到哪一页</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">replace</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/news<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">replace</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/contact<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>联系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">replace</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/invest<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>投资<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. 首页 B. 关于 C. 新闻 D. 联系</p><p>解析：按顺序点击</p><p>1）进入首页</p><p>2）从 首页 跳到 关于，此时 首页 -&gt; 关于</p><p>3）从 关于 替换到 新闻，此时 首页 -&gt; 新闻</p><p>4）从 新闻 替换为 联系，此时 首页 -&gt; 联系</p><p>5）从联系 替换为 投资，此时 首页 -&gt; 投资</p><p>6）点击返回，会从投资返回到首页</p><p>所以选A</p></li><li><p>未设置浏览器存储的情况下，控制台输出什么</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script type=&quot;text/javascript&quot;&gt;
  const userStr = localStorage.getItem(&#39;user&#39;)
  const user = JSON.parse(userStr)
  console.log(&#39;userStr&#39;, userStr)
  console.log(&#39;user&#39;, user)
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. null, null</p><p>B. null, undefined</p><p>C. undefined, undefined</p><p>D. 报错</p><p>解析：localStroage.getItem()如果获取不存在的键，则返回null，所以userStr为null，JSON.parse(null)依然为null，所以user也为null，选择A</p></li><li><p>localStroage可以存储的数据类型</p><p>A. String B. Number C. Array D. Object</p><p>解析：localStroage是以字符串的形式存储的，A～D都会以字符串形式存储，例如Number(1)存储为&quot;1&quot;，[1, 2, 3]存储为&quot;1, 2, 3&quot;，调用了数组的toString()方法，{a: 1}调用对象的toString()方法存储为&quot;[object Object]&quot;</p></li><li><p>定时器存执行了多少次</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>new Vue({
  el: &#39;#app&#39;,
  data () {
    return {
      count: 0.05
    }
  },
  mounted () {
    console.log(&#39;mounted&#39;)
    this.timer = setInterval(() =&gt; {
      if (this.count === 0.01) {
        clearInterval(this.timer)
      }
      this.count -= 0.01
      console.log(&#39;count&#39;, this.count)
    }, 1000)
  }
}).$mount(&#39;#app&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. 3 B. 4 C. 5 D. 不停止</p><p>解析：js中数字运算都是先转换为二进制在进行运算的，浮点数运算采用IEEE算术标准，几乎所有的编程语言都是采用这个标准。</p><p>浮点数在转换二进制的时候，会出现无限循环，总之，0.05多次减去0.01之后精度会变，不会刚好为0.01，条件不成立，上述定时器会一直执行。</p></li>`,4),O=a(`<p>为保持指定组件在切换时不被销毁，横线上应该填？</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>__<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. 路由器中定义的路径</p><p>B. 路由器中定义的路径名称</p><p>C.组件vue中定义的名称</p><p>D. 组件vue的路径</p>`,6),L={href:"https://cn.vuejs.org/api/built-in-components.html#keepalive",target:"_blank",rel:"noopener noreferrer"},W=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">KeepAliveProps</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
  * 如果指定，则只有与 \`include\` 名称
  * 匹配的组件才会被缓存。
  */</span>
  include<span class="token operator">?</span><span class="token operator">:</span> MatchPattern
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，include应该填需要缓存的组件名称，选B</p>`,2);function X(F,H){const t=l("ExternalLinkIcon");return o(),c("div",null,[r,d,k,n("ol",null,[n("li",null,[v,n("blockquote",null,[n("p",null,[s("注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () => this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。"),n("a",m,[s("摘自vue2官网"),e(t)])])]),g]),b,n("li",null,[h,q,_,f,y,n("p",null,[s("解析："),n("a",x,[s("Vue允许对按键事件监听时添加按键修饰符"),e(t)]),s("，经验证，上面这些按键事件定义都是正确的")])]),n("li",null,[w,n("p",null,"解析：Vue中，在模版中可以使用"+i()+"方式写JS表达式，这里的fullname()方法一共调用了3次，computename是计算属性，不管在模版中使用几次，都只会计算一次，只有当其依赖的属性变化了，才会再次执行，所以答案是C",1)]),n("li",null,[S,n("p",null,[s("解析："),n("a",j,[s("参考"),e(t)]),s("，官方给出了例子，当监听对象的单个属性时，可以使用deep: true，或者字符串'c.d'的方式。另外，还可以写一个computed计算对象的属性，并把这个计算属性作为侦听源。")])]),A,n("li",null,[D,n("blockquote",null,[n("p",null,[s("v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件："),B,s(" text 和 textarea 元素使用 value property 和 input 事件； checkbox 和 radio 使用 checked property 和 change 事件； select 字段将 value 作为 prop 并将 change 作为事件。"),n("a",C,[s("vue表单输入绑定"),e(t)])])]),V,I]),n("li",null,[N,n("ul",null,[n("li",null,[n("a",M,[s("v-pre"),e(t)]),s("：跳过其所在节点及其子节点的编译过程，可以利用他跳过没有指令语法和插值语法的节点，加快效率。")])]),T]),E,n("li",null,[O,n("p",null,[s("解析："),n("a",L,[s("参考"),e(t)])]),W])])])}const P=p(u,[["render",X],["__file","lx-230921.html.vue"]]);export{P as default};
