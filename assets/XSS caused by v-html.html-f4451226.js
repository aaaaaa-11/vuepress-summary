import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},e=t(`<h1 id="v-html-为什么会导致xss" tabindex="-1"><a class="header-anchor" href="#v-html-为什么会导致xss" aria-hidden="true">#</a> v-html 为什么会导致XSS</h1><p><strong>XSS</strong>： 跨站脚本攻击（Cross-Site Scripting），是一种安全漏洞，攻击者通过注入恶意脚本（通常是 JavaScript 代码）到应用程序中，以在用户端执行该脚本。</p><p>Vue指令 <code>v-html</code>，用于将数据渲染为 HTML。然而，使用 <code>v-html</code> 不正确地渲染未经信任的用户输入可能会导致XSS的风险。</p><p>例如：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInput<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">userInput</span><span class="token operator">:</span> <span class="token string">&#39;&lt;img src=x onerror=alert(&quot;XSS&quot;)&gt;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，userInput 包含了一个带有 onerror 事件的图片标签，当 v-html 渲染这个输入时，将触发 onerror 事件，执行 alert(&quot;XSS&quot;)，从而导致 XSS 攻击。</p><p>要防止 XSS 攻击，可以考虑以下几点：</p><ol><li><p>输入验证和过滤： 在接收用户输入之前，进行输入验证并过滤潜在的恶意内容。</p></li><li><p>使用DOMPurify： DOMPurify 是一个用于净化 HTML 的库，可以帮助防止 XSS 攻击。在使用 v-html 渲染用户输入时，可以使用 DOMPurify 对输入进行处理。</p></li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> DOMPurify <span class="token keyword">from</span> <span class="token string">&#39;dompurify&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">userInput</span><span class="token operator">:</span> <span class="token string">&#39;&lt;img src=x onerror=alert(&quot;XSS&quot;)&gt;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">sanitizedHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>避免直接插入未经处理的用户输入： 尽量避免直接将未经处理的用户输入插入到 HTML 中，而是通过其他方式展示用户输入，如文本节点或属性。</li></ol><p>总的来说，要注意在使用 v-html 渲染用户输入时，确保对用户输入进行适当的验证和过滤，以防止潜在的 XSS 攻击。</p>`,11),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","XSS caused by v-html.html.vue"]]);export{r as default};
