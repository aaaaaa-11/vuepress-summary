import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},o=t(`<h1 id="js单线程为什么可以同时发起多个异步请求" tabindex="-1"><a class="header-anchor" href="#js单线程为什么可以同时发起多个异步请求" aria-hidden="true">#</a> JS单线程为什么可以同时发起多个异步请求</h1><p>JavaScript 是一种单线程的编程语言，这意味着它在任意时刻只能执行一个任务。然而，JavaScript 引擎采用了事件循环（event loop）和异步编程模型，使得在单线程的情况下能够同时发起多个异步请求。</p><h3 id="事件循环-event-loop" tabindex="-1"><a class="header-anchor" href="#事件循环-event-loop" aria-hidden="true">#</a> 事件循环（Event Loop）：</h3><p>JavaScript 的事件循环是一种机制，用于处理异步操作。事件循环使得 JavaScript 可以通过将异步任务推送到任务队列（task queue）中，并在适当的时候将它们取出执行，从而实现异步执行。</p><p>事件循环的基本流程如下：</p><ol><li><p><strong>执行同步代码：</strong> 首先执行当前调用栈中的同步代码。</p></li><li><p><strong>检查任务队列：</strong> 检查任务队列是否有任务待执行。</p></li><li><p><strong>执行异步任务：</strong> 如果有异步任务，将任务从队列中取出并执行。</p></li><li><p><strong>重复：</strong> 重复上述步骤，不断执行同步代码和异步任务。</p></li></ol><h3 id="异步请求" tabindex="-1"><a class="header-anchor" href="#异步请求" aria-hidden="true">#</a> 异步请求：</h3><p>当 JavaScript 代码发起异步请求时，例如通过 <code>XMLHttpRequest</code>、<code>fetch</code>、或者在 Node.js 中使用 <code>fs.readFile</code> 等，这些操作会被放入任务队列中等待执行。在请求的过程中，JavaScript 引擎可以继续执行后续的同步代码或者处理其他异步任务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Async Task 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Async Task 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;End&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，<code>setTimeout</code> 和 <code>fetch</code> 都是异步任务，它们会在事件循环的某个阶段被执行，而不会阻塞后续代码的执行。这样，即使 JavaScript 是单线程的，我们可以通过事件循环机制来实现并发处理多个异步任务。</p><p>总结：JavaScript 的单线程是指在同一时刻只能执行一个任务，但通过异步编程和事件循环，可以实现在单线程中并发处理多个异步任务。</p>`,11),e=[o];function c(i,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","JS Event Loop.html.vue"]]);export{r as default};
