import{_ as e,p as o,q as t,a1 as r}from"./framework-5866ffd3.js";const n={},l=r('<h1 id="vue父子组件生命周期顺序" tabindex="-1"><a class="header-anchor" href="#vue父子组件生命周期顺序" aria-hidden="true">#</a> vue父子组件生命周期顺序</h1><p>在 Vue 中，父子组件的生命周期钩子函数的执行顺序如下：</p><ol><li><strong>父组件 beforeCreate</strong></li><li><strong>父组件 created</strong></li><li><strong>父组件 beforeMount</strong></li><li><strong>子组件 beforeCreate</strong></li><li><strong>子组件 created</strong></li><li><strong>子组件 beforeMount</strong></li><li><strong>子组件 mounted</strong></li><li><strong>父组件 mounted</strong></li></ol><p>在这个顺序中，首先是父组件的生命周期钩子函数执行，接着是子组件的生命周期钩子函数执行。最后，当父组件和子组件都挂载完成时，父组件的 <code>mounted</code> 钩子函数会被调用。</p><p>这个生命周期顺序是在组件初始化和挂载的过程中。在组件更新的过程中，生命周期钩子函数的执行顺序也是有规律可循的，例如 <code>beforeUpdate</code>、<code>updated</code> 钩子函数等。</p><p>生命周期的具体用途：</p><ul><li><code>beforeCreate</code>：在实例初始化之后，数据观测和事件配置之前被调用。</li><li><code>created</code>：实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li><li><code>beforeMount</code>：在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li><code>mounted</code>：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li></ul>',7),c=[l];function i(d,s){return o(),t("div",null,c)}const u=e(n,[["render",i],["__file","Vue Parent-Child Component Lifecycle.html.vue"]]);export{u as default};
