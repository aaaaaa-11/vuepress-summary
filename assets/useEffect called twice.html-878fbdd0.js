import{_ as o,M as p,p as c,q as l,R as n,t as s,N as e,a1 as t}from"./framework-5866ffd3.js";const i={},u=t(`<h1 id="组件挂载后-useeffect-被调用两次" tabindex="-1"><a class="header-anchor" href="#组件挂载后-useeffect-被调用两次" aria-hidden="true">#</a> 组件挂载后 useEffect()被调用两次</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Com</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;EFFECT RUNING&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 执行两次</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Demo<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),r={id:"原因",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#原因","aria-hidden":"true"},"#",-1),k={href:"https://zh-hans.react.dev/reference/react/useEffect#my-effect-runs-twice-when-the-component-mounts",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"这是 React18 才新增的特性。",-1),m=n("li",null,'仅在开发模式("development")下，且使用了严格模式("Strict Mode")下会触发。 生产环境("production")模式下和原来一样，仅执行一次。',-1),f={href:"https://juejin.cn/post/7137654077743169573",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>在开发环境、严格模式下，React会在实际执行useEffect()前先调用一次它的回调和cleanup</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 组件中执行useEffect()</span>
<span class="token keyword">const</span> <span class="token function-variable function">Com</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;EFFECT&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CLEANUP&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Demo<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>EFFECT
CLEANUP
EFFECT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={href:"https://zh-hans.react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"开发环境下去掉strict mode，useEffect()就不会在组件挂载后执行2次",-1);function g(E,x){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("h2",r,[d,s(),n("a",k,[s("原因"),e(a)])]),n("blockquote",null,[n("ol",null,[v,m,n("li",null,[s("之所以执行两次，是为了模拟立即卸载组件和重新挂载组件。 为了帮助开发者提前发现重复挂载造成的 Bug 的代码。 同时，也是为了以后 React的新功能做铺垫。 未来会给 React 增加一个特性，允许 React 在保留状态的同时，能够做到仅仅对UI部分的添加和删除。 让开发者能够提前习惯和适应，做到组件的卸载和重新挂载之后， 重复执行 useEffect的时候不会影响应用正常运行。"),n("a",f,[s("参考"),e(a)])])])]),b,n("p",null,[s("useEffect()会执行2次，是一个压力测试，为了让开发者可以发现组件挂载和卸载时useEffect()的执行过程中可能存在的问题（"),n("a",h,[s("demo"),e(a)]),s("）， 例如没有清除某些监听、没有断开某些连接......")]),_])}const R=o(i,[["render",g],["__file","useEffect called twice.html.vue"]]);export{R as default};
