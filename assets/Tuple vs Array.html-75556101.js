import{_ as n,p as s,q as a,a1 as p}from"./framework-5866ffd3.js";const t={},e=p(`<h1 id="ts的元祖和和js数组的区别" tabindex="-1"><a class="header-anchor" href="#ts的元祖和和js数组的区别" aria-hidden="true">#</a> TS的元祖和和JS数组的区别</h1><p>TypeScript 中的元组（Tuple）与 JavaScript 中的数组（Array）有一些重要的区别，主要涉及类型和长度的约束。</p><h3 id="_1-类型约束" tabindex="-1"><a class="header-anchor" href="#_1-类型约束" aria-hidden="true">#</a> 1. <strong>类型约束：</strong></h3><ul><li><p><strong>元组（Tuple）：</strong> TypeScript 中的元组是一种有序的、固定长度的数据结构，每个位置上的元素可以有不同的类型。你可以在声明元组的时候为每个位置指定相应的类型，从而在使用过程中获得类型检查。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myTuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>数组（Array）：</strong> JavaScript 中的数组是一种可以包含任意类型元素的有序集合。在 TypeScript 中，数组的元素可以是同一类型，也可以是不同类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myArray<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_2-长度约束" tabindex="-1"><a class="header-anchor" href="#_2-长度约束" aria-hidden="true">#</a> 2. <strong>长度约束：</strong></h3><ul><li><p><strong>元组（Tuple）：</strong> 元组在创建时确定了长度，之后不能增加或减少元素的个数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myTuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 无法添加或删除元素</span>
<span class="token comment">// myTuple.push(true);  // 错误</span>
<span class="token comment">// myTuple.pop();       // 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数组（Array）：</strong> 数组的长度是动态的，你可以随时添加或删除元素。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myArray<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;grape&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 可以添加元素</span>
myArray<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 可以删除元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-访问元素" tabindex="-1"><a class="header-anchor" href="#_3-访问元素" aria-hidden="true">#</a> 3. <strong>访问元素：</strong></h3><ul><li><p><strong>元组（Tuple）：</strong> 元组中的元素可以通过索引进行访问。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myTuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> firstElement<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myTuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> secondElement<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> myTuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数组（Array）：</strong> 数组中的元素同样可以通过索引进行访问。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myArray<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> firstElement<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> secondElement<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>总体而言，元组和数组在 TypeScript 中的主要区别在于对类型和长度的约束。元组提供了对每个位置元素类型的强制约束，并且具有固定的长度，而数组更加灵活，可以包含任意类型的元素并支持动态增减。选择使用哪种数据结构取决于你的需求和数据的特性。</p>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","Tuple vs Array.html.vue"]]);export{u as default};
