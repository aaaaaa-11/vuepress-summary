import{_ as a,p as s,q as n,a1 as e}from"./framework-5866ffd3.js";const t={},o=e(`<h1 id="react-classname-收到错误的类型-布尔值" tabindex="-1"><a class="header-anchor" href="#react-classname-收到错误的类型-布尔值" aria-hidden="true">#</a> React className 收到错误的类型：布尔值</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> classes <span class="token operator">=</span> condition <span class="token operator">?</span> <span class="token string">&#39;class-name&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span>classes<span class="token punctuation">}</span><span class="token operator">&gt;</span>content<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token comment">// 很显然，我不小心把 ! 错误的加到了classes前面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Warning: Received \`false\` for a non-boolean attribute \`className\`.

If you want to write it to the DOM, pass a string instead: className=&quot;false&quot; or className={value.toString()}.

If you used to conditionally omit it with className={condition &amp;&amp; value}, pass className={condition ? value : undefined} instead.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更常见的一种错误写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>condition <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;class-name&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>content<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token comment">// 如果condition为false， 则className会接收一个false，所以不要用这种方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正确写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>condition <span class="token operator">?</span> <span class="token string">&#39;class-name&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>content<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),p=[o];function c(r,l){return s(),n("div",null,p)}const d=a(t,[["render",c],["__file","className type error.html.vue"]]);export{d as default};
